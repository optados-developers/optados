#--------------------------------------------------------------
# O p t a D O S   D O S   T e s t s
#--------------------------------------------------------------
#
# Test coverage
#           +-------+----------+--------+
#           | fixed | adaptive | linear |
# ----------+-------+----------+--------+
# odo file  |   1   |    2     |    3   |
# dat file  |       |    4,5   |    6   |
# spin      |   1   |    2,4   |    3   |
# no spin   |       |    5     |        |
# ome file  |       |    2,4,5 |    3   |
# dome file |       |          |    6   |
# ----------+-------+----------+--------+

# 1)
# Initial JRY example test
# It does fixed broadening so only requires a band file
[testopt_dos_fixed]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 2)
# Test the adaptive smearing for a DOS
# Note this is the prototype test for any test that requires
# Unzipping and converting formatted files.
[testopt_dos_adaptive]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 3)
# Test the linear smearing for a DOS
[testopt_dos_linear]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 4)
# Test the adaptive  smearing dat file for a DOS
[testopt_dos_adaptive_dat]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.adaptive.dat

# 5)
# Test the adaptive smearing dat file for a DOS
# in the case where the underlying states are not spin dependent
[testopt_dos_adaptive_no_spin]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.adaptive.dat

# 6)
# Test the linear smearing dat file for a DOS from a dome file
[testopt_dos_linear_dome]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.linear.dat

#--------------------------------------------------------------
# O p t a D O S   P D O S   T e s t s
#--------------------------------------------------------------
# Test coverage
#                  +-------+----------+--------+
#                  | fixed | adaptive | linear |
# -----------------+-------+----------+--------+
# odo file         |  2    |          |   5    |
# pdos.dat file    |       |    1     |        |
# generic out file |       |    3     |   4    |
# String 1         |  2    |          |        |
# String 2         |       |    3     |        |
# String 3         |       |          |   4    |
# String 4         |       |          |   5    |
# ome_file         |  2    |    1     |  4,5   |
# dome_file        |       |    3     |        |
# no_spin          |       |          |   4    |
# -----------------+-------+----------+--------+

# 1)
# Test the PDOS using short-cut keywords, use an ome input and
# and check the anguar output file
[testopt_pdos_angular]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.pdos.dat

# 2)
# Test the PDOS using the first string in the examples, use an
# ome as input and test fixed smearing
[testopt_pdos_string1]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 3)
# Test the PDOS using the second string in the examples, use a
# dome file as inputm testing adaptive smearing and the generic
# output file
[testopt_pdos_string2]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.pdos.proj-0001-0001.dat

# 4)
# Test the PDOS using the third string in the example, do it indpendent
# of spin, use linear smearing and test the generic out file
[testopt_pdos_string3]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.pdos.proj-0001-0002.dat

# 5)
# Test the PDOS using the fourth string in the eamples, do it using
# linear broadening and testing the odo file.
[testopt_pdos_string4]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

#--------------------------------------------------------------
# O p t a D O S   P D I S   T e s t s
#--------------------------------------------------------------
# Test coverage
# One for AFH?

#--------------------------------------------------------------
# O p t a D O S   J D O S   T e s t s
#--------------------------------------------------------------
# Test coverage
#                  +-------+----------+--------+
#                  | fixed | adaptive | linear |
# -----------------+-------+----------+--------+
# odo file         |   1   |          |        |
# dat file         |       |   2      |   3    |
# ome_file         |   1   |          |        |
# dome_file        |       |   2      |        |
# no_spin          |       |          |   3    |
# -----------------+-------+----------+--------+

# 1)
[testopt_jdos_fixed_odo]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

# 2)
[testopt_jdos_adaptive_dome]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.jadaptive.dat

# 3)
[testopt_jdos_linear_no_spin]
program = OPTADOS_DOS_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2.jlinear.dat

#--------------------------------------------------------------
# O p t a D O S   O p t i c s   T e s t s
#--------------------------------------------------------------
# Test coverage
#
# 1 testopt_optics_poly
# 2 testopt_optics_polar
# 3 testopt_optics_unpolar
# 4 testopt_optics_tensor
# 5 testopt_optics_drude
# 6 testopt_optics_intraband
# 7 testopt_optics_conductivity
#
#               |1|2|3|4|5|6|7|
# --------------+-+-+-+-+-+-+-+
# Si            |x|x|x|x| | | |
# Al            | | | | |x|x|x|
# Polyxtaline   |x| | | |x|x|x|
# Polarised     | |x| | | | | |
# Unpolarized   | | |x| | | | |
# Tensor        | | | |x| | | |
# Fixed         |x| | | | | |x|
# Adaptive      | |x| |x| |x| |
# Linear        | | |x| |x| | |
# Intraband     | | | | |x|x|x|
# Loss_fn Bdng  | | |@| | | | |
# Drude Bdng    | | | | |@| | |
# --------------+-+-+-+-+-+-+-+
# odo file      |x| | | | | | |
# epsilon file  | |x| |x| | | |
# loss_fn       | | |x| | | | |
# absorption    | | | | | | | |
# reflection    | | | | |x| | |
# ref inx       | | | | | |x| |
# conductiviy   | | | | | | |x|
# --------------+-+-+-+-+-+-+-+
#
# @= change from default
#

#1
[testopt_optics_poly]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

#2
[testopt_optics_polar]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_epsilon.dat

#3
[testopt_optics_unpolar]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_loss_fn.dat

#4
[testopt_optics_tensor]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_epsilon.dat

#5
[testopt_optics_drude]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Al4.odi', '')
output = Al4_reflection.dat

#6
[testopt_optics_intraband]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Al4.odi', '')
output = Al4_refractive_index.dat

#7
[testopt_optics_conductivity]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Al4.odi', '')
output = Al4_conductivity.dat
tolerance = ( (1.0e-5, 1.0e-5, 'col2'), (1.0e-5, 1.0e-5, 'col3'))

#--------------------------------------------------------------
# O p t a D O S   C o r e l o s s    T e s t s
#--------------------------------------------------------------
# Test coverage
#

# 1 testopt_core_absorb
# 2 testopt_core_emisson
# 3 testopt_core_polarised
# 4 testopt_core_all
# 5 testopt_core_chemical_shift

#                           |1|2|3|4|5|
# --------------------------+-+-+-+-+-+
# Si                        |x|x|x|x| |
# NaGe                      | | | | |x|
# absorbtion                |x| | | |x|
# emision                   | |x|x| | |
# all                       | | | |x| |
# poly                      |x| |x|x| |
# polarised                 | |x|x| | |
# core broadening           | |x|x|x|x|
# LAI gaussian width        | |@| |@|@|
# LAI lorentzian width      | | |@|@|@|
# LAI lorentzian scale      | | |@|@|@|
# LAI lorentzian offset     | | |@|@|@|
# --------------------------+-+-+-+-+-+
# odo file                  |x| | | | |
# core_edge file            | |x|x|x|x|
# --------------------------+-+-+-+-+-+
#
# @= change from default

#1
[testopt_core_absorb]
program = OPTADOS_ODO_OK
inputs_args = ('Si2.odi', '')
output = Si2.odo

#2
[testopt_core_emisson]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_core_edge.dat

#3
[testopt_core_polarised]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_core_edge.dat

#4
[testopt_core_all]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('Si2.odi', '')
output = Si2_core_edge.dat

#5
[testopt_core_chemical_shift]
program = OPTADOS_GEN_DAT_OK
inputs_args = ('NaGe.odi', '')
output = NaGe_core_edge.dat

#--------------------------------------------------------------
# miz_chemical_shift Tests
#--------------------------------------------------------------

# Test that miz_chemical_shift produces a NaGe-mizoguchi.out file and
# that the "Mizoguchi chemical shift" has the same value as in our
# input for the test

#1
[testopt_miz_chemical_shift]
program = OPTADOS_MIZ_OUT_OK
inputs_args = ('NaGe.castep','-e Ge -exe castep -s NaGe-singlepoint -i')
output = NaGe-mizoguchi.out

#--------------------------------------------------------------
# O p t a D O S   I n t e r n a l   S t u f f    T e s t s
#--------------------------------------------------------------
# Test coverage
#
# Numerical intdos
# hybrid linear
# finite bin corrections
# band_gap_stuf
# DOS at fermi -- do we have a route?

#--------------------------------------------------------------
# O D 2 O D   T e s t s
#--------------------------------------------------------------

# Test that od2od produces an output. In this case we look for whether it has
# correctly read the number of bands from a Si2.band file
[testod2od_dummy]
program = OD2OD_LOG_OK
inputs_args = ('', '-i dummy -o dummy Si2')
output = Si2.log

# It is non-trivial to test the tester. Here we take the ome_fmt file convert
# it to a ome_bin (using the makefile) then convert it back to an ome_fmt with
# the testcode.
# I am aware that this does NOT test that the .ome_bin is correct. Only that
# od2od manages to perform AA^-1=I.  Better ideas welcome!
[testod2od_ome_fmt]
program = OD2OD_FMT_OK
inputs_args = ('', '-i ome_bin -o ome_fmt -w Si2_out Si2')
output = Si2_out.ome_fmt

#--------------------------------------------------------------
# P h o t o e m i s s i o n   T e s t s 
#--------------------------------------------------------------
# Test coverage
#
# Photoemission
# Wrong inputs:
#  - leaving out photoemission
#  TODO:
#  - setting wrong min > max photon energies
#  - setting wrong distance of min/max energies
# Testing the QE matrix file output for correct numbers in mpi
# MPI gives same result as serial
# photon_sweep task gives same result as the photoemission task

# This is a general test of the OptaDOS photoemission module.
[testopt_photo_general]
program = OPTADOS_PHOTO_ODO_OK
max_nprocs = 0
inputs_args = ('C2.odi','')
output = C2.odo

# This tests if leaving out the photon energy fails the run
[testopt_photo_finput1]
program = OPTADOS_PHOTO_OPTERR_FAIL
max_nprocs = 0
inputs_args = ('C2.odi','')
output = C2.opt_err

# This tests the performance of the photon sweep vs singular photoemission runs.
[testopt_photo_sweep]
program = OPTADOS_PHOTO_ODO_OK
max_nprocs = 0
inputs_args = ('C2.odi','')
output = C2.odo

# This tests the performance of the photon sweep vs singular photoemission runs.
[testopt_photo_mpi]
program = OPTADOS_MPI_PHOTO_ODO_OK
min_nprocs = 2
nprocs = 2
inputs_args = ('C2.odi','')
output = C2.odo

# This tests the performance of the photon sweep vs singular photoemission runs.
[testopt_photo_mpi_qemat]
program = OPTADOS_MPI_PHOTO_QEMAT_OK
min_nprocs = 2
nprocs = 2
inputs_args = ('C2.odi','')
output = C2_qe_matrix.dat

#--------------------------------------------------------------
# C a t e g o r y   L i s t
#--------------------------------------------------------------
[categories]
optados_only = testopt_*
od2od_only = testod2od_*
photoemission_only = testopt_photo_*
all = optados_only od2od_only photoemission_only
default =  all